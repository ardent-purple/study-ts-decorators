// –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä -- —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
// —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å—Ç—Ä–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –º—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º: –∫–ª–∞—Å—Å, –º–µ—Ç–æ–¥, –ø–æ–ª–µ, –∞–∫—Å–µ—Å—Å–æ—Ä –∏–ª–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
// —ç—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–ª–∞—Å—Å–∞. –û–Ω –±–µ—Ä–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ -- –¥–µ–ª–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑–≤–Ω–µ
// –∏–Ω–∞—á–µ –≥–æ–≤–æ—Ä—è, –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–ª–∞—Å—Å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
function Final(constructor: Function) {
  Object.freeze(constructor)
  Object.freeze(constructor.prototype)
}

@Final // declarative nature of decorators
class IceCream {
  constructor(
    public flavour: string
  ) {}
}

console.log(Object.isFrozen(IceCream)) // true
console.log(Object.isFrozen(IceCream.prototype)) // true
const cherryTop = new IceCream('cherry')
console.log(Object.isFrozen(cherryTop)) // false

cherryTop.flavour = 'nougat' // writable and readable still
console.log(cherryTop.flavour) 

// TypeError: Cannot assign to read only property 'constructor' of object '#<IceCream>'
// class FroYo extends IceCream {  }

// –ó–∞—á–∞—Å—Ç—É—é –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –≤ "–§–∞–±—Ä–∏–∫–∞—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤", —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏—Ö –±–æ–ª–µ–µ –≥–∏–±–∫–æ
// –ø—Ä–∏–º–µ—Ä -- –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è, –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –∫–æ—Ç–æ—Ä–æ–µ, –±—É–¥–µ–º –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å –µ–≥–æ –≤ —ç–º–æ–¥–∑–∏

// decorator factory
function Emojify(emoji: string) {
  return function(target: any, key: string | symbol) {
    let val = target[key]

    const getter = () => {
      return val 
    }

    const setter = (next: string) => {
      console.log(`updating ${String(key)}`);
      val = `${emoji} ${next} ${emoji}`
    }
    console.log(target);
    console.log(key);
    console.log(val);
    
    
    
    Object.defineProperty(target, key, {
      get: getter,
      set: setter,
      enumerable: true,
      configurable: true
    })
  }
}

class Message {
  @Emojify('‚ö†')
  public content: string

  constructor (content: string) {
    this.content = content
  }
}

class Soldier {
  @Emojify('üíÇ')
  public order: string

  constructor (order: string) {
    this.order = order
  }
}

const message = new Message('we all gonna die')
const soldier = new Soldier('yeah')
console.log(message);
console.log(soldier);
console.log(message.content);
console.log(soldier.order);

// –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –º–µ—Ç–æ–¥–æ–≤
// –î–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
function Delay(ms: number) {
  return function(
    target: any, // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞, class.prototype –¥–ª—è –º–µ—Ç–æ–¥–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    key: string | symbol, // –∫–ª—é—á 
    descriptor: PropertyDescriptor // –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–≤–æ–π—Å—Ç–≤–∞, value —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∞–º—É –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–º–µ—Ç–æ–¥)
    ) {
      const fn = descriptor.value;

      descriptor.value = function (...args: any[]) {
        setTimeout(() => fn.apply(this, args), ms)
      }

      return descriptor
    }
}

class Car {
  beep() {
    console.log('beep beep!')
  }
}

class SlowCar extends Car {
  @Delay(1000) 
  beep() {
    console.log('errmmmmm... ah, yeah...')
    super.beep()
  }
}

class SlowestCar extends Car {
  @Delay(1000)
  @Delay(2000) // –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤, –æ–±–æ—Ä–∞—á–∏–≤–∞—é—Ç—Å—è –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
  beep() {
    console.log('ohhhhhhhhhhhhhhhhhh........')
    super.beep()
  }
}

const car = new Car()
const slowCar = new SlowCar()
const slowestCar = new SlowestCar()
slowestCar.beep()
slowCar.beep()
car.beep()